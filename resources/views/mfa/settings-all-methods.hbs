<!-- MFA Settings Page Header -->
<div class="page-header mb-4">
    <h1 class="page-title">
        <i class="fas fa-shield-alt me-3"></i>
        Multi-Factor Authentication
    </h1>
    <p class="page-subtitle">Secure your account with multiple authentication methods</p>
</div>

<!-- Flash Messages -->
<div id="alert-container"></div>

<!-- MFA Status Overview -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card border-0 shadow-sm">
            <div class="card-body">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <div class="d-flex align-items-center">
                            <div class="me-4">
                                <i id="mfa-status-icon" class="fas fa-shield-alt fa-3x text-warning"></i>
                            </div>
                            <div>
                                <h4 class="mb-1" id="mfa-status-title">MFA Not Enabled</h4>
                                <p class="text-muted mb-0" id="mfa-status-desc">
                                    Enable multi-factor authentication to add an extra layer of security.
                                </p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 text-end">
                        <div id="mfa-enabled-actions" class="hidden">
                            <span class="badge bg-success fs-6 px-3 py-2">
                                <i class="fas fa-check-circle me-2"></i>MFA Active
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Available MFA Methods -->
<div class="row mb-4">
    <div class="col-12">
        <h4 class="mb-3">
            <i class="fas fa-list me-2"></i>Available Authentication Methods
        </h4>
    </div>
</div>

<div class="row">
    <!-- TOTP Authenticator App -->
    <div class="col-lg-6 mb-4">
        <div class="card mfa-method-card" id="totp-card">
            <div class="card-body">
                <div class="d-flex align-items-start justify-content-between">
                    <div class="flex-grow-1">
                        <h5 class="card-title">
                            <i class="fas fa-mobile-alt text-primary me-2"></i>
                            Authenticator App (TOTP)
                        </h5>
                        <p class="text-muted small">Use apps like Google Authenticator, Authy, or 1Password</p>
                        <div class="method-status" id="totp-status">
                            <span class="badge bg-secondary">Not Configured</span>
                        </div>
                    </div>
                    <button class="btn btn-primary btn-sm" onclick="setupMethod('totp')">
                        <i class="fas fa-plus me-1"></i>Setup
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Email OTP -->
    <div class="col-lg-6 mb-4">
        <div class="card mfa-method-card" id="email-card">
            <div class="card-body">
                <div class="d-flex align-items-start justify-content-between">
                    <div class="flex-grow-1">
                        <h5 class="card-title">
                            <i class="fas fa-envelope text-info me-2"></i>
                            Email OTP
                        </h5>
                        <p class="text-muted small">Receive verification codes via email</p>
                        <div class="method-status" id="email-status">
                            <span class="badge bg-secondary">Not Configured</span>
                        </div>
                    </div>
                    <button class="btn btn-info btn-sm" onclick="setupMethod('email')">
                        <i class="fas fa-plus me-1"></i>Setup
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- SMS OTP -->
    <div class="col-lg-6 mb-4">
        <div class="card mfa-method-card" id="sms-card">
            <div class="card-body">
                <div class="d-flex align-items-start justify-content-between">
                    <div class="flex-grow-1">
                        <h5 class="card-title">
                            <i class="fas fa-sms text-success me-2"></i>
                            SMS OTP
                        </h5>
                        <p class="text-muted small">Receive verification codes via text message</p>
                        <div class="method-status" id="sms-status">
                            <span class="badge bg-secondary">Not Configured</span>
                        </div>
                    </div>
                    <button class="btn btn-success btn-sm" onclick="setupMethod('sms')">
                        <i class="fas fa-plus me-1"></i>Setup
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- WebAuthn / Security Key -->
    <div class="col-lg-6 mb-4">
        <div class="card mfa-method-card" id="webauthn-card">
            <div class="card-body">
                <div class="d-flex align-items-start justify-content-between">
                    <div class="flex-grow-1">
                        <h5 class="card-title">
                            <i class="fas fa-key text-warning me-2"></i>
                            Security Key (WebAuthn)
                        </h5>
                        <p class="text-muted small">Use hardware security keys like YubiKey or Titan</p>
                        <div class="method-status" id="webauthn-status">
                            <span class="badge bg-secondary">Not Configured</span>
                        </div>
                    </div>
                    <button class="btn btn-warning btn-sm" onclick="setupMethod('webauthn')">
                        <i class="fas fa-plus me-1"></i>Setup
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Biometric -->
    <div class="col-lg-6 mb-4">
        <div class="card mfa-method-card" id="biometric-card">
            <div class="card-body">
                <div class="d-flex align-items-start justify-content-between">
                    <div class="flex-grow-1">
                        <h5 class="card-title">
                            <i class="fas fa-fingerprint text-danger me-2"></i>
                            Biometric
                        </h5>
                        <p class="text-muted small">Use fingerprint, Face ID, or Touch ID</p>
                        <div class="method-status" id="biometric-status">
                            <span class="badge bg-secondary">Not Configured</span>
                        </div>
                    </div>
                    <button class="btn btn-danger btn-sm" onclick="setupMethod('biometric')">
                        <i class="fas fa-plus me-1"></i>Setup
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Backup Codes -->
    <div class="col-lg-6 mb-4">
        <div class="card mfa-method-card border-warning" id="backup-card">
            <div class="card-body">
                <div class="d-flex align-items-start justify-content-between">
                    <div class="flex-grow-1">
                        <h5 class="card-title">
                            <i class="fas fa-life-ring text-warning me-2"></i>
                            Backup Codes
                        </h5>
                        <p class="text-muted small">One-time recovery codes for account access</p>
                        <div class="method-status" id="backup-status">
                            <span class="badge bg-warning">Always Available</span>
                        </div>
                    </div>
                    <button class="btn btn-outline-warning btn-sm" onclick="viewBackupCodes()">
                        <i class="fas fa-eye me-1"></i>View
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Setup Modals will be injected here -->
<div id="setup-modal-container"></div>

<style>
    .mfa-method-card {
        transition: all 0.3s ease;
        border: 2px solid transparent;
    }

    .mfa-method-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 0.5rem 1.5rem rgba(0, 0, 0, 0.15) !important;
    }

    .mfa-method-card.enabled {
        border-color: #28a745;
        background-color: #f8fff8;
    }

    .method-status {
        margin-top: 1rem;
    }

    .hidden {
        display: none !important;
    }

    .page-header {
        margin-bottom: 2rem;
    }

    .page-title {
        font-size: 2rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 0.5rem;
    }

    .page-subtitle {
        color: #6c757d;
        font-size: 1.1rem;
    }
</style>

<script>
    let activeMethods = {};

    // Initialize page on load
    document.addEventListener('DOMContentLoaded', function() {
        loadMFAMethods();
    });

    async function loadMFAMethods() {
        try {
            const response = await fetch('/mfa/methods', {
                credentials: 'same-origin'
            });
            const data = await response.json();

            if (response.ok && data.methods) {
                activeMethods = {};
                let hasAnyEnabled = false;

                data.methods.forEach(method => {
                    activeMethods[method.method_type] = method;
                    updateMethodCard(method.method_type, method);
                    if (method.is_enabled) hasAnyEnabled = true;
                });

                // Update overall status
                if (hasAnyEnabled) {
                    showMFAEnabled();
                } else {
                    showMFADisabled();
                }
            }
        } catch (error) {
            console.error('Failed to load MFA methods:', error);
            showAlert('Failed to load MFA status', 'danger');
        }
    }

    function updateMethodCard(methodType, methodData) {
        const card = document.getElementById(`${methodType}-card`);
        const status = document.getElementById(`${methodType}-status`);
        const button = card.querySelector('button');

        if (methodData.is_enabled) {
            card.classList.add('enabled');
            status.innerHTML = '<span class="badge bg-success"><i class="fas fa-check me-1"></i>Active</span>';
            button.innerHTML = '<i class="fas fa-cog me-1"></i>Manage';
            button.classList.remove('btn-primary', 'btn-info', 'btn-success', 'btn-warning', 'btn-danger');
            button.classList.add('btn-secondary');
        } else {
            card.classList.remove('enabled');
            status.innerHTML = '<span class="badge bg-secondary">Not Configured</span>';
        }
    }

    function showMFAEnabled() {
        document.getElementById('mfa-status-icon').className = 'fas fa-shield-alt fa-3x text-success';
        document.getElementById('mfa-status-title').textContent = 'MFA Enabled';
        document.getElementById('mfa-status-desc').textContent = 'Your account is protected with multi-factor authentication.';
        document.getElementById('mfa-enabled-actions').classList.remove('hidden');
    }

    function showMFADisabled() {
        document.getElementById('mfa-status-icon').className = 'fas fa-shield-alt fa-3x text-warning';
        document.getElementById('mfa-status-title').textContent = 'MFA Not Enabled';
        document.getElementById('mfa-status-desc').textContent = 'Enable multi-factor authentication to add an extra layer of security.';
        document.getElementById('mfa-enabled-actions').classList.add('hidden');
    }

    async function setupMethod(methodType) {
        // Check if already enabled
        if (activeMethods[methodType]?.is_enabled) {
            await manageMethod(methodType);
            return;
        }

        switch(methodType) {
            case 'totp':
                await setupTOTP();
                break;
            case 'email':
                await setupEmail();
                break;
            case 'sms':
                await setupSMS();
                break;
            case 'webauthn':
                showAlert('WebAuthn setup coming soon!', 'info');
                break;
            case 'biometric':
                showAlert('Biometric setup coming soon!', 'info');
                break;
        }
    }

    async function setupTOTP() {
        // Redirect to existing TOTP setup page
        window.location.href = '/mfa';
    }

    async function setupEmail() {
        try {
            showLoading('Setting up Email OTP...');

            const response = await fetch('/mfa/setup-email', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'same-origin'
            });

            document.getElementById('alert-container').innerHTML = '';

            if (response.ok) {
                const data = await response.json();
                showAlert('Email OTP enabled successfully! A test code has been sent to your email.', 'success');
                await loadMFAMethods();
            } else {
                const data = await response.json();
                showAlert(data.error || 'Failed to setup Email OTP', 'danger');
            }
        } catch (error) {
            document.getElementById('alert-container').innerHTML = '';
            showAlert('Network error: ' + error.message, 'danger');
        }
    }

    async function setupSMS() {
        const phone = prompt('Enter your phone number (with country code, e.g., +1234567890):');
        if (!phone) return;

        try {
            showLoading('Setting up SMS OTP...');

            const response = await fetch('/mfa/setup-sms', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'same-origin',
                body: JSON.stringify({ phone_number: phone })
            });

            document.getElementById('alert-container').innerHTML = '';

            if (response.ok) {
                const data = await response.json();
                showAlert('SMS OTP enabled successfully! A test code has been sent to your phone.', 'success');
                await loadMFAMethods();
            } else {
                const data = await response.json();
                showAlert(data.error || 'Failed to setup SMS OTP', 'danger');
            }
        } catch (error) {
            document.getElementById('alert-container').innerHTML = '';
            showAlert('Network error: ' + error.message, 'danger');
        }
    }

    async function manageMethod(methodType) {
        const confirmed = confirm(`Do you want to disable ${methodType.toUpperCase()} MFA?`);
        if (!confirmed) return;

        try {
            showLoading(`Disabling ${methodType.toUpperCase()}...`);

            const response = await fetch(`/mfa/disable-method`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'same-origin',
                body: JSON.stringify({ method_type: methodType })
            });

            document.getElementById('alert-container').innerHTML = '';

            if (response.ok) {
                const data = await response.json();
                showAlert(`${methodType.toUpperCase()} disabled successfully`, 'success');
                await loadMFAMethods();
            } else {
                const data = await response.json();
                showAlert(data.error || 'Failed to disable method', 'danger');
            }
        } catch (error) {
            document.getElementById('alert-container').innerHTML = '';
            showAlert('Network error: ' + error.message, 'danger');
        }
    }

    async function viewBackupCodes() {
        showAlert('Backup codes feature coming soon!', 'info');
    }

    function showAlert(message, type) {
        const alertContainer = document.getElementById('alert-container');
        const alertClass = type === 'danger' ? 'alert-danger' :
                          type === 'warning' ? 'alert-warning' :
                          type === 'info' ? 'alert-info' : 'alert-success';

        alertContainer.innerHTML = `
            <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                <i class="fas fa-${type === 'danger' ? 'exclamation-circle' : type === 'warning' ? 'exclamation-triangle' : type === 'info' ? 'info-circle' : 'check-circle'} me-2"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;

        setTimeout(() => {
            alertContainer.innerHTML = '';
        }, 5000);

        alertContainer.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }

    function showLoading(message) {
        const alertContainer = document.getElementById('alert-container');
        alertContainer.innerHTML = `
            <div class="alert alert-info">
                <span class="spinner-border spinner-border-sm me-2"></span>
                ${message}
            </div>
        `;
    }
</script>
