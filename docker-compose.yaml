services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - APP_NAME=RustAxum
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_URL=http://localhost:3000
      - DATABASE_URL=postgresql://rustaxum:password@db:5432/rustaxum
      - DB_HOST=db
      - DB_PORT=5432
      - DB_DATABASE=rustaxum
      - DB_USERNAME=rustaxum
      - DB_PASSWORD=password
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - JWT_EXPIRES_IN=86400
      - REFRESH_TOKEN_EXPIRES_IN=604800
      - SMTP_HOST=mailpit
      - SMTP_PORT=1025
      - SMTP_USERNAME=
      - SMTP_PASSWORD=
      - SMTP_FROM_EMAIL=noreply@rustaxum.com
      - SMTP_FROM_NAME=RustAxum
      - LOG_LEVEL=info
      - PORT=3000
      # Storage configuration
      - FILESYSTEM_DISK=local
      - STORAGE_LOCAL_ROOT=storage/app
      - STORAGE_PUBLIC_ROOT=storage/app/public
      # MinIO S3 configuration
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=rustaxum_access
      - S3_SECRET_KEY=rustaxum_secret_key_change_in_production
      - S3_BUCKET=rustaxum-storage
      - S3_REGION=us-east-1
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - app_storage:/app/storage
    networks:
      - rustaxum_network

  db:
    image: postgres:17-alpine
    environment:
      - POSTGRES_DB=rustaxum
      - POSTGRES_USER=rustaxum
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/database/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rustaxum -d rustaxum"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - rustaxum_network

  # Optional: Redis for caching/sessions
  redis:
    image: redis:8-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - rustaxum_network

  # Optional: Adminer for database management
  adminer:
    image: adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=db
      - ADMINER_DESIGN=nette
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - rustaxum_network

  # Mailpit for email testing
  mailpit:
    image: axllent/mailpit:v1.10
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port
    environment:
      - MP_SMTP_AUTH_ACCEPT_ANY=1
      - MP_SMTP_AUTH_ALLOW_INSECURE=1
    restart: unless-stopped
    networks:
      - rustaxum_network

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:RELEASE.2024-10-13T13-34-11Z
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    environment:
      - MINIO_ROOT_USER=rustaxum_access
      - MINIO_ROOT_PASSWORD=rustaxum_secret_key_change_in_production
      - MINIO_DEFAULT_BUCKETS=rustaxum-storage
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - rustaxum_network

  # MinIO client to create buckets
  minio-setup:
    image: minio/mc:RELEASE.2024-10-08T09-37-26Z
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 rustaxum_access rustaxum_secret_key_change_in_production;
      /usr/bin/mc mb myminio/rustaxum-storage --ignore-existing;
      /usr/bin/mc anonymous set public myminio/rustaxum-storage/public;
      exit 0;
      "
    networks:
      - rustaxum_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_storage:
    driver: local
  minio_data:
    driver: local

networks:
  rustaxum_network:
    driver: bridge
